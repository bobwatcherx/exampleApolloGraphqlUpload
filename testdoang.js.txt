const { ApolloServer, gql,GraphQLUpload } = require('apollo-server-express');
const fs = require('fs');
const path = require('path');
const express = require('express')
const { graphqlUploadExpress } = require("graphql-upload");
const typeDefs = gql`
 scalar FileUpload
  type Book {
    title: String
    author: String
  }
  type Query {
    books: [Book]
  }
  type UploadFIle{
    url:String!
  }
  type Mutation{
    uploadSIngle(file:FileUpload!):UploadFIle!,
    singleUploadStream(file: Upload!): UploadFIle!
  }
`;
const books = [
  {
    title: 'The Awakening',
    author: 'Kate Chopin',
  },
  {
    title: 'City of Glass',
    author: 'Paul Auster',
  },
];
const resolvers = {
   FileUpload: GraphQLUpload,
  Query: {
    books: () => books,
  },
  Mutation:{
    uploadSIngle:async(parent,{file})=>{
        const {createReadStream,filename,mimetype} = await file
        const mau = createReadStream()
        const lokasi = path.join(__dirname,`/sukanya/images/${filename}`)
         console.log(mau)
       await mau
           .pipe(fs.createWriteStream(lokasi))
         return {
          url:`http://localhost:4000/public/images/${filename}`
        }
    }
  }
};
const server = new ApolloServer({ typeDefs, resolvers, });
const app = express();
app.use(express.static('sukanya'))
// app.use(graphqlUploadExpress({ maxFileSize: 1000000000}));

server.applyMiddleware({app})
// The `listen` method launches a web server.
app.listen({port:4000},()=>{
  console.log("server run 4000")
})